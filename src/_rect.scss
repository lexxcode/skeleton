// @private: background-image generator
// Take a particle map and generate background-image value
//
// @param: Map $particle
// @return: List of background-image value
@function skeleton-image-rect($particle) {
    $color: map-get($particle, 'color');
    $width: map-get($particle, 'width');
    $height: map-get($particle, 'height');
    $half-width: $width / 2;
    $half-height: $height / 2;
    $radius: min(map-get($particle, 'radius'), $half-width, $half-height);
    $result: ();

    @if not $radius or strip-units($radius) == 0 {
        $result: (
            linear-gradient($color, $color),
        );
    } @else {
        $result: (
            radial-gradient(closest-side, $color 100%, transparent 100%),
            radial-gradient(closest-side, $color 100%, transparent 100%),
            radial-gradient(closest-side, $color 100%, transparent 100%),
            radial-gradient(closest-side, $color 100%, transparent 100%),
            linear-gradient($color, $color),
            linear-gradient($color, $color),
        );
    }

    @return $result;
}

// @private: background-size generator
// Take a particle map and generate background-size value
//
// @param: Map $particle
// @return: List of background-size value
@function skeleton-size-rect($particle) {
    $width: map-get($particle, 'width');
    $height: map-get($particle, 'height');
    $half-width: $width / 2;
    $half-height: $height / 2;
    $radius: min(map-get($particle, 'radius'), $half-width, $half-height);
    $result: ();

    @if not $radius or strip-units($radius) == 0 {
        $result: (
            $width $height,
        );
    } @else {
        $result: (
            #{$radius * 2} #{$radius * 2},
            #{$radius * 2} #{$radius * 2},
            #{$radius * 2} #{$radius * 2},
            #{$radius * 2} #{$radius * 2},
            $width #{$height - $radius * 2},
            #{$width - $radius * 2} $height
        );
    }

    @return $result;
}

// @private: background-position generator
// Take a particle map and generate background-position value
//
// @param: Map $particle
// @return: List of background-position value
@function skeleton-position-rect($particle) {
    $width: map-get($particle, 'width');
    $height: map-get($particle, 'height');
    $x: map-get($particle, 'x');
    $y: map-get($particle, 'y');
    $half-width: $width / 2;
    $half-height: $height / 2;
    $radius: min(map-get($particle, 'radius'), $half-width, $half-height);
    $result: ();

    @if not $radius or strip-units($radius) == 0 {
        $result: (
            $x $y,
        );
    } @else {
        $result: (
            $x $y,
            #{$x + $width - $radius * 2} $y,
            $x #{$y + $height - $radius * 2},
            #{$x + $width - $radius * 2} #{$y + $height - $radius * 2},
            $x #{$y + $radius},
            #{$x + $radius} $y
        );
    }

    @return $result;
}

// @private: background-repeat generator
// Take a particle map and generate background-repeat value
//
// @param: Map $particle
// @return: List of background-repeat value
@function skeleton-repeat-rect($particle) {
    $width: map-get($particle, 'width');
    $height: map-get($particle, 'height');
    $half-width: $width / 2;
    $half-height: $height / 2;
    $radius: min(map-get($particle, 'radius'), $half-width, $half-height);
    $result: ();

    @if not $radius or strip-units($radius) == 0 {
        $result: (
            no-repeat,
        );
    } @else {
        $result: (no-repeat, no-repeat, no-repeat, no-repeat, no-repeat, no-repeat);
    }

    @return $result;
}

// @public: function for get $particle object for draw rect
//
// @param: $color
// @param: $width
// @param: $height
// @param: $x: 0
// @param: $y: 0
// @param: $radius: null
// 
// @return: Formated map of parameters
@function skeleton-rect(
    $color,
    $width,
    $height,
    $x: 0,
    $y: 0,
    $radius: null
) {
    @return (
        'type': 'rect',
        'color': $color,
        'width': $width,
        'height': $height,
        'x': $x,
        'y': $y,
        'radius': $radius
    );
}
